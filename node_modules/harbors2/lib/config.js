/**
 * The configuration file handling module
 */
var path = require('path');
var fs = require('fs');
var querystring = require("querystring");

/**
 * Read the INI file
 *
 * @param {String} filename
 * returns {Object}
 */
exports.load = function (filename) {
    var base = path.join(__dirname, '/../../..');
    /^(\S\:|\/)/.test(filename) ?
        filename = filename :
        (filename = path.join(base,filename));

    var file = (require("fs").readFileSync(filename)+'').replace(/#.*?(\r|\n)/g,'$1'),
        classify = querystring.parse(file, '[', ']');


    //过滤空配置以及解析配置键值
    for(var p in classify){
        (p == '' || classify[p] == '') ?
            delete classify[p] :
            (function(){
                var t = classify[p]
                    .split(/(\r\n|\n\r|\r|\n)/g);
                classify[p] = t
                    .map(function(a){
                         a = a.replace(/(\r|\n)/g,'');
                        return querystring
                            .parse(
                                a.replace(/\s*?\=\s*/g,'=')
                            );
                    })
                    .reduce(function(a, b){
                        if (a && b) {
                            for (var key in b) {
                                switch(key){
                                    case 'dir':
                                        /^(\S\:|\/)/.test(b[key]) ?
                                            a[key] = b[key] :
                                            (a[key] = path.join(base,b[key]));
                                        break;
                                    case 'error_log':
                                        /^(\S\:|\/)/.test(b[key]) ?
                                            a[key] = b[key] :
                                            (a[key] = path.join(base,b[key]));
                                        break;
                                    default:
                                        a[key] = b[key];
                                }
                            }
                        }
                        return a;
                    });
            })();
    }
    return classify;
};

exports.merge = function(){
    for(var p in harbors.config){
        p != 'server' &&
        harbors.utils.merge(harbors.config[p],harbors.config['server'],true);
    }
};
