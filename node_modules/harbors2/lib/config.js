/**
 * The configuration file handling module
 */
var path = require('path');
var fs = require('fs');
var querystring = require("querystring");

/**
 * Read the INI file
 *
 * @param {String} filename
 * returns {Object}
 */
exports.load = function (filename) {
    var config = {};

    var base = path.join(__dirname, '/../../..');
    //判断filename是否为绝对地址
    /^(\S\:|\/)/.test(filename) ?
        filename = filename :
        (filename = path.join(base,filename));
    var file = (require("fs").readFileSync(filename)+'');
    //切割字符串
    var fileSplit = file.split(/[\r\n]/);
    //过滤换行、空字符、错误
    fileSplit = fileSplit.filter(function(a){
        if(a!='') return a;
    });
    //过滤无用空格
    fileSplit = fileSplit.map(function(a){
        return a.replace(/\s/g,'');
    });
    //逐行解析
    var type = '';
    fileSplit.map(function(a){
        if(/^\[.*?\]$/.test(a)){//配置标题
            type = a.substr(1, a.length-2);//暂存下列配置类型
            return a;
        }
        if(/^(#|\/\/)/.test(a)){//注释信息
            return a;
        }
        var obj = querystring.parse(a);
        if(typeof(obj)=='object'&&type=='server'){//语法正确的配置信息
            if(!config[type]) config[type] = {};
            for(var p in obj){
                if(config[type][p]){
                    typeof(config[type][p])=='string' ?
                        (config[type][p] = [config[type][p]], config[type][p].push(obj[p])) :
                        config[type][p].push(obj[p]);
                }else{
                    config[type][p] = obj[p];
                }
            }
        }
        if(typeof(obj)=='object'&&type=='vhost'){

        }
    });
    console.log(config)




};
