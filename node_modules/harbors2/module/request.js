/**
 * 封装对象
 * 各种方法集合
 */
var fs = require('fs');
var zlib = require('zlib');
var path = require('path');
var _l_utils = require('../lib/utils');
var _l_mime = require('../lib/mime');
var _m_session = require('./session');
var _m_path = require('../module/path');
var _m_log = require('./log');

/**
 * 抛出高阶函数
 * @param req
 * @param res
 * @param p
 * @param config
 * @returns {request}
 */
module.exports = function(req,res){
    return new request(req,res);
};

/**
 * 初始化对象
 * @param req
 * @param res
 * @param p
 * @param config
 */
var request = function(req,res){
    this.req = req;
    this.res = res;
    this._statusCode = 200;
    this.vhost = _m_path.vhost(req);
    if(this.vhost==undefined){
        this.notFound();
        this.log('vhost is not found')
        return;
    }
    this.path = _m_path.path(req,this.vhost);
    /*
    {
        Module: '_.js',
        Extname: '',
        Url: '/asdf',
        File: '',
        Get: { asdf: 'asdf' }
     }
    * */
    //载入自定义外部模块
    for(var p in harbors._moduleFN){
        this[p] = harbors._moduleFN[p];
    }
};

/**
 * 抛出静态文件返回方法
 * @param file
 */
request.prototype.display = function(file){
    harbors.debug('Run request.display [Module module/request.js - ...]');
    try{
        if(!/^(\/|\S:)/.test(file))
            file = path.join(this.vhost.dir,file);

        var stat = fs.statSync(file);
        if(!stat) throw new Error(file+': stat is undefined');
        var lastModified = stat.mtime.toUTCString();
        var ifModifiedSince = "If-Modified-Since".toLowerCase();

        this.res
            .setHeader("Last-Modified", lastModified);
        this.res
            .setHeader('Content-Type',_l_mime[this.path.Extname] || "text/html");
        var expires = new Date();
        expires.setTime(expires.getTime() + (this.vhost.expires-0));
        this.res
            .setHeader('Cache-Control','max-age=' + this.vhost.expires);
        this.res
            .setHeader('Expires',expires.toUTCString());

        if (this.req.headers[ifModifiedSince] &&
            lastModified == this.req.headers[ifModifiedSince]) {
            this._statusCode = 304;
            this.send();
            return;
        }

        if(this.vhost.gzip!='false'){
            var raw = fs.createReadStream(file);
            var acceptEncoding =
                this.req
                    .headers['accept-encoding'] || "";
            var matched =
                new RegExp('('+this.vhost.gzip_file+')')
                    .test(file);
            if (matched && acceptEncoding.match(/\bgzip\b/)) {
                this.res
                    .setHeader('Content-Encoding', 'gzip');
                this.send(raw.pipe(zlib.createGzip()));
            } else if (matched && acceptEncoding.match(/\bdeflate\b/)) {
                this.res
                    .setHeader('Content-Encoding', 'deflate');
                this.send(raw.pipe(zlib.createDeflate()));
            } else {
                this.send(raw);
            }
        }else{
            var html = fs.readFileSync(file);
            this.send(html);
        }

    }catch(err){
        console.log(err);
        this.error('Sorry, Server display is error...')
    }
};

/**
 * 抛出cookie方法
 * @returns {*}
 */
request.prototype.cookie = function(){

    var self = this;
    switch(arguments.length){
        case 0:
            return self._cookie;
            break;
        case 1:
            if(typeof(arguments[0]) == 'string')
                return self._cookie[arguments[0]];
            break;
        default:
            if(typeof(arguments[0]) == 'string' && typeof(arguments[1]) == 'string'){
                var op = '';
                if(typeof(arguments[2]) == 'object'){
                    arguments[2].expires && (op += "expires="+new Date(new Date()-0+arguments[2].expires)+";");
                    arguments[2].path && (op += "path="+(arguments[2].path||'/')+";");
                    arguments[2].httpOnly && (op += "httponly;");
                }
                self.res.setHeader("Set-Cookie", arguments[0]+'='+arguments[1]+';'+op);
            }
            break;
    }
};

/**
 * 抛出session方法，判断存储类型以及session是否开启
 * @returns {*}
 */
request.prototype.session = function(){

    var self = this;
    if(self.vhost.session=='false'){
        return {};
    }
    var sID = self.vhost.session_id;
    self._sCookie = self._sCookie||self.cookie(sID);

    var newCookie = function(){
        return _l_utils.uid(25);
    };

    //判断cookie标记是否存在
    if(self._sCookie==undefined){
        self._sCookie = newCookie();
        self.cookie(sID,self._sCookie);
    }
    switch(arguments.length){
        case 0://获取所有session
            return self._session;
            break;
        case 1://获取单条session
            if(typeof(arguments[0])!='string') return;
            return self._session[arguments[0]];
            break;
        default://添加session
            if(typeof(arguments[0])!='string'&&typeof(arguments[1])!='string') return;
            _m_session.set(arguments,self);
            break;
    }


};

request.prototype.send = function(string){
    try{
        string && string.length && this.res.setHeader('Content-Length',string.length);
        this.res.setHeader('Server',harbors.serverName);
        this.res.setHeader('version',harbors.version);
        this.res.writeHeader(this._statusCode);
        if(typeof(string)=='object'){
            string.pipe(this.res);
            return;
        }
        this.res.end(string);
    }catch(err){
        console.log(err);
        this.error();
    }finally{
        this.log('test');
    }
};

request.prototype.notFound = function(string){

    this._statusCode = 404;
    this.res.setHeader("Last-Modified", 0);
    this.res.setHeader('Cache-Control','max-age=0');
    this.res.setHeader('Expires',0);
    this.vhost && this.vhost.page_404 ?
        this.display(this.vhost.page_404) :
        this.send(string||'error 404');
};

request.prototype.error = function(string){

    this._statusCode = 500;
    this.res.setHeader("Last-Modified", 0);
    this.res.setHeader('Cache-Control','max-age=0');
    this.res.setHeader('Expires',0);
    this.vhost && this.vhost.page_500 ?
        this.display(this.vhost.page_500) :
        this.send(string||'error 500');
};

request.prototype.log = function(str){
    _m_log.log({
        dir:this.vhost&&this.vhost.log_dir||harbors.config.server.log_dir,
        ip:this.req.connection.remoteAddress,
        code:this._statusCode,
        host:this.req.headers.host,
        url:this.req.url,
        size:this.vhost&&this.vhost.log_size||harbors.config.server.log_size,
        errmsg:str||''
    });
};