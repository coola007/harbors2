var path = require('path');
var fs = require('fs');
var baseDir = path.join(__dirname,'../../../');

/**
 * 读取session
 *   mem：从全局变量中读取
 *   file：判断文件存在，读取，然后判断过期时间与ip地址正确定，过期则删除session文件
 * @param request
 * @param next
 * @returns {undefined}
 */
exports.analysis = function(request,next){

    //解析cookie
    request.req.headers.cookie ?
        (function(){
            if(!request.req.headers.cookie){
                return {};
            }
            var temp = request.req.headers.cookie.split(";");
            var cookie = {};
            for(var i=0;i<temp.length;i++){
                var temp_2 = temp[i].split("=");
                temp_2[0] = temp_2[0].replace(/^\s*/,'');
                cookie[temp_2[0]] = temp_2[1];
            }
            request._cookie = cookie;
        })() :
        request._cookie = {};

    //判断是否需要解析session
    if(request.vhost.session=='false'){
        request._session = {};
        next();
        return undefined;
    }

    var sId = request.cookie(request.vhost.session_id);
    if(!sId){
        request._session = {};
        next();
        return undefined;
    }

    switch(request.vhost.session_id){
        case 'mem':
            var name = request.path.vhostName+'_'+sId;
            harbors._session[name] ?
                request._session = harbors._session[name] :
                request._session = {};
            next();
            break;
        default://file
            var pathDir = path.join(baseDir,request.vhost.tmp_dir,'./session/');
            if(!fs.existsSync(path_)){
                request._session = {};
                next();
                return;
            }
            var path_ = fs.readFileSync(pathDir);
            var file = path.join(pathDir,sId);
            if(!fs.existsSync(file)){
                request._session = {};
                next();
                return;
            }
            var session = fs.readFileSync(file);
            if(session){
                session = JSON.parse(session);
                if(session.time>new Date()-0){//未过期
                    if(session.ip==request.req.connection.remoteAddress)
                        request._session = session.data;
                    else
                        request._session = {};
                }else{//过期，删除
                    fs.unlink(path.join(pathDir,sId));
                    request._session = {};
                }
            }else{
                request._session = {};
            }
            next();
            break;
    }
};

/**
 * 设置session
 *   mem模式：
 *     在harbors._session这个全局变量里增加session数据
 *     session key值为 虚拟主机名字_seesionId
 *     并开启计时器倒计时删除数据，及其的耗资源，鸡肋功能
 *   file模式：
 *     存储在临时文件夹下，为每一个session创建一个对应的json文件
 *     json => {
 *       ip:创建此session的ip地址（绑定ip防止cookie冒充）
 *       time:此session的过期时间戳
 *       data:session主要内容
 *     }
 * @param arg
 * @param self
 */
exports.set = function(arg,self){

    switch(self.vhost.session_module){
        case 'mem':
            var dName = self.path.vhostName+'_'+self._sCookie;
            if(!harbors._session[dName])
                harbors._session[dName] = {};
            harbors._session[dName][arg[0]] = arg[1];
            //清除过期计数器
            clearTimeout(harbors._sessionTimer[dName]);
            //记录过期删除时间
            harbors._sessionTimer[dName] = setTimeout(function(){
                delete harbors._session[dName][arg[0]];
            },self.config.session_survavil);
            break;
        default ://file
            var pathDir = path.join(baseDir,self.vhost.tmp_dir,'./session/');
            //console.log(pathDir)
            var data = self._session;
            data[arg[0]] = arg[1];
            //console.log(data)
            //检查文件夹
            !fs.existsSync(pathDir) && fs.mkdirSync(pathDir);
            //console.log(path.join(pathDir,self._sCookie))
            fs.writeFile(path.join(pathDir,self._sCookie),JSON.stringify({
                ip:self.req.connection.remoteAddress,
                time:(new Date()-0)+parseInt(self.vhost.session_survavil),
                data:data
            }));
    }
};