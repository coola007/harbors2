/**
 * Path analysis module
 */
var path = require('path');
var fs = require('fs');
var querystring = require('querystring');

/**
 * 计算并且返回来路虚拟主机的config
 * @param req
 * @returns {*}
 */
exports.vhost = function(req){
    if(harbors.config.server.vhost=='false')
        return harbors.config.server;
    //判断缓存是否存在
    if(harbors._vhost[req.headers.host]){
        //console.log(harbors._vhost[req.headers.host]);
        return harbors._vhost[req.headers.host];
    }
    var vhost = '';
    var vhostTest = req.headers.host;
    //判断是否为80端口（默认省略），自动加上:80
    !/\:\d+$/.test(vhostTest) && ( vhostTest += ':80' );
    //逐个匹配虚拟主机
    while(vhostTest != vhost && !harbors.config[vhostTest]){
        vhost = vhostTest;
        vhostTest = harbors.utils.vhostBack(vhostTest);
        //console.log(vhostTest)
    }
    //与来路匹配的虚拟主机存在
    if(harbors.config[vhostTest]){
        //缓存在虚拟主机列表内
        harbors._vhost[req.headers.host] = harbors.config[vhostTest];
        //console.log(harbors._vhost[req.headers.host]);
        return harbors._vhost[req.headers.host];
    }
    //不存在
    return undefined;
};

exports.path = function(req,config){
    if(harbors._rewrite[config.rewrite]){
        harbors.debug('Run path rewrite [Module module/path.js]');
        harbors._rewrite[config.rewrite](req);
    }
    var _module,_extname,_url,_file;
    var _sp = req.url.split('?');
    var _get = querystring.parse(_sp[1]);
    _url = _sp[0];
//    console.log(_get);
//    console.log(_url);
    //开始分析url
    if(/\/$/.test(_url)){//是否封口
        _file = config['default_file']||harbors.config.server['default_file'];
        _module = 'index'+(config['module']||harbors.config.server['module']);
        _extname = path.extname(_file);//扩展名
    }else{
        _extname = path.extname(_url);//扩展名
        if(_extname==''){
            _file = '';
        }
        _module = config['module']||harbors.config.server['module'];
    }
    return {
        Module:_module,
        Extname:_extname,
        Url:_url,
        File:_file,
        Get:_get
    };
};