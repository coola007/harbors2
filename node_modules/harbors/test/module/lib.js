var assert = require("assert");

var $url = require('../../lib/url');
var $config = require('../../lib/config');

describe('config',function(){

    describe('load',function(){
        var config = $config.load('./node_modules/harbors2/config/config.ini');
        it('load server',function(){
            assert.notEqual(undefined, config);
            assert.notEqual(undefined, config.server);
        });
        it('setting',function(){
            assert.ifError(!/(\S+\:|\/)/.test(config.server.dir));
            assert.equal('index.html', config.server.default_file);
            assert.equal('false', config.server.session);
            assert.equal('HsessID', config.server.session_id);
            assert.equal('3600000', config.server.session_survavil);
            assert.equal('true', config.server.gzip);
            assert.equal('.html|.css|.js', config.server.gzip_file);
            assert.equal('all', config.server.deny);
            assert.equal('127.0.0.2', config.server.allow[1]);
            assert.equal('127.0.0.1', config.server.allow[0]);
            assert.equal('false', config.server.debug);
            assert.equal('86400000', config.server.expires);
            assert.equal('1800000', config.server.cache_time);
            assert.ifError(!/(\S+\:|\/)/.test(config.server.log_dir));
            assert.equal('256', config.server.log_size);
            assert.ifError(!/(\S+\:|\/)/.test(config.server.tmp_dir));
            assert.equal('3001', config.server.listen[1]);
            assert.equal('3000', config.server.listen[0]);
            assert.equal('1', config.server.process);
            assert.equal('false', config.server.vhost);
            assert.equal('_.js', config.server.module);
        });
    });

});




describe('url', function(){

    describe('completion', function(){
        it('add /index', function(){
            assert.equal('/index', $url.completion('/index'));
            assert.equal('/index/index', $url.completion('/index/'));
        });
    });

    describe('analytical',function(){
        it('get param',function(){
            assert.equal('test', $url.analytical('/index?get=test')['get']['get']);
            assert.equal('99', $url.analytical('/index?get=test&ff=99')['get']['ff']);
        });
        it('url param',function(){
            assert.equal('/index', $url.analytical('/index?get=test')['url']);
            assert.equal('/index/ooo', $url.analytical('/index/ooo?get=test')['url']);
        });
        it('route param',function(){
            assert.equal('index', $url.analytical('/index?get=test')['route'][0]);
            assert.equal('ooo', $url.analytical('/index/ooo?get=test')['route'][1]);
        });
    });

    describe('host',function(){
        it('host port',function(){
            assert.equal('127.0.0.1:80', $url.host('127.0.0.1'));
            assert.equal('127.0.0.1:99', $url.host('127.0.0.1:99'));
            assert.equal('dev.baidu.com:80', $url.host('dev.baidu.com'));
            assert.equal('dev.baidu.com:3000', $url.host('dev.baidu.com:3000'));
        });
    });

    describe('vhost',function(){
//        it('Matching check',function(){
//            assert.equal('99', $url.vhost('dev.baidu.com',{headers:{host:'dev.baidu.com'}})['num']);
//        });
//        console.log(harbors._vhost)
//        it('Cache check',function(){
//            assert.equal('99', harbors._vhost['dev.baidu.com']);
//        })
    })

});