var url     = require('url');
var fs      = require('fs');
var path    = require("path");
var http    = require("http");
var net     = require("net");
var sys     = require("sys");
var fastcgi = require("./fastcgi");

var NODEPHP_STATIC = 'static';
var NODEPHP_FCGI   = 'fcgi';
function makeHeaders(headers, params) {
    if (headers.length <= 0) {
        return params;
    }

    for (prop in headers) {
        head = headers[prop];
        prop = prop.replace(/-/, '_').toUpperCase();
        if (prop.indexOf('CONTENT_TYPE') < 0) {
            // Quick hack for PHP, might be more or less headers.
            prop = 'HTTP_' + prop;
        }

        params[params.length] = [prop, head]
    }

    return params;
};
var params;

var FCGI_RESPONDER = fastcgi.constants.role.FCGI_RESPONDER;
var FCGI_BEGIN     = fastcgi.constants.record.FCGI_BEGIN;
var FCGI_STDIN     = fastcgi.constants.record.FCGI_STDIN;
var FCGI_STDOUT    = fastcgi.constants.record.FCGI_STDOUT;
var FCGI_PARAMS    = fastcgi.constants.record.FCGI_PARAMS;
var FCGI_END       = fastcgi.constants.record.FCGI_END;
exports.response = function(request){
    var connection = new net.Stream();
    connection.setNoDelay(true);

    var writer = null;
    var parser = null;
    console.log('d:\\code\\3533\\qa\\info.php');
    params = makeHeaders(request.req.headers, [
        ["SCRIPT_FILENAME",'d:\\code\\3533\\qa\\info.php'],
        ["QUERY_STRING", {}],
        ["REQUEST_METHOD", request.req.method],
        ["PHP_SELF", fs.readFileSync('d:\\code\\3533\\qa\\info.php')],
        ["GATEWAY_PROTOCOL", "CGI/1.1"],
        ["SERVER_SOFTWARE", "nodephp/" + process.version]
    ]);
    var header = {
        "version": fastcgi.constants.version,
        "type": FCGI_BEGIN,
        "recordId": 0,
        "contentLength": 0,
        "paddingLength": 0
    };
    var begin = {
        "role": FCGI_RESPONDER,
        "flags": 0
    };

    function sendRequest (connection) {
        console.log('send php')
        header.type = FCGI_BEGIN;
        header.contentLength = 8;
        writer.writeHeader(header);
        writer.writeBegin(begin);
        connection.write(writer.tobuffer());

        header.type = FCGI_PARAMS;
        header.contentLength = fastcgi.getParamLength(params);
        writer.writeHeader(header);
        writer.writeParams(params);;
        connection.write(writer.tobuffer());

        header.type = FCGI_STDOUT;
        writer.writeHeader(header);
        connection.write(writer.tobuffer());

        connection.end();
    };

    connection.ondata = function (buffer, start, end) {
        console.log('ondata')
        parser.execute(buffer, start, end);
    };

    connection.addListener("connect", function() {
        console.log('connect fastcgi');
        writer = new fastcgi.writer();
        parser = new fastcgi.parser();

        body="";

        parser.onRecord = function(record) {
            console.log(record.header.type);
            if (record.header.type == FCGI_STDOUT) {
                var tbody = record.body;

                parts = tbody.split("\r\n\r\n");

                headers = parts[0];
                headerParts = headers.split("\r\n");

                body += parts[1];

                var responseStatus = 200;

                headers = [];
                try {
                    for(i in headerParts) {
                        header = headerParts[i].split(': ');
                        if (header[0].indexOf('Status') >= 0) {
                            responseStatus = header[1].substr(0, 3);
                            continue;
                        }

                        headers.push([header[0], header[1]]);
                    }
                } catch (err) {
                    //console.log(err);
                }

                headers.push(['X-Server' , 'Node.js-' + process.version]);
                if(record.header.contentLength>10000){
                    request.res.writeHead(responseStatus, headers);
                    request.res.end(record.body);
                    console.log(record.header)
                }

                console.log('  --> Request Response Status Code: "' + responseStatus + '"');
            }
        };

        parser.onHeader = function(header) {
            body = '';
        };

        parser.onError = function(err) {
            //console.log(err);
        };

        sendRequest(connection);
    });

//    connection.addListener("close", function() {
//        console.log('close')
//        connection.end();
//    });
//
//    connection.addListener("error", function(err) {
//        console.log('error')
//        sys.puts(sys.inspect(err.stack));
//        connection.end();
//    });

    connection.connect(9000, '127.0.0.1');


};